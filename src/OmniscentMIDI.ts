import WebAudioTinySynth from 'webaudio-tinysynth';


interface ChannelData {
    channel: number;
    instrument: number;
    data: Uint8Array;
}

export class OmniscentMIDI {
    // 0x0DE3-0x0F27: MIDI table
    static MIDI_TABLE = new Uint8Array([
        // Channel 2: 0x50, 0x0DE3-0x0E51
        0x02, 0x50,
            0xFB, // Repeat x5
                0xFE, // Repeat x2
                    0x32, 0x04, 0x45, 0x02, 0x3E, 0x02, 0x45, 0x02,
                    0x51, 0x02, 0x3E, 0x02, 0x45, 0x02, 0x4F, 0x02,
                    0x3E, 0x02, 0x45, 0x02, 0x51, 0x02, 0x3E, 0x02,
                    0x45, 0x02, 0x4F, 0x02, 0x51, 0x02,
                0x00,
                0xFE, // Repeat x2
                    0x32, 0x04, 0x46, 0x02, 0x3E, 0x02, 0x46, 0x02,
                    0x51, 0x02, 0x3E, 0x02, 0x46, 0x02, 0x4F, 0x02,
                    0x3E, 0x02, 0x46, 0x02, 0x52, 0x02, 0x3E, 0x02,
                    0x46, 0x02, 0x4F, 0x02, 0x52, 0x02,
                0x00,
            0x00,
            0x37, 0x20, 0x38, 0x20, 0x33, 0x20, 0x35, 0x18,
            0x37, 0x08, 0x39, 0x20, 0x32, 0x20, 0x3C, 0x30,
            0x3A, 0x08, 0x39, 0x08, 0x37, 0x40,
            0xFE, // Repeat x2
                0x43, 0x10, 0x3E, 0x10, 0x45, 0x10, 0x46, 0x10,
            0x00,
            0xFE, // Repeat x2
                0x46, 0x10, 0x45, 0x10, 0x3E, 0x10, 0x41, 0x10,
            0x00,
        0x00,
        // Channel 4: 0x32, 0x0E52-0x0EA0
        0x04, 0x32,
            0x01, 0x80, 0x01, 0x80, 0x41, 0x1C, 0x40, 0x02,
            0x41, 0x02, 0x40, 0x10, 0x3E, 0x08, 0x3C, 0x08,
            0x43, 0x1C, 0x41, 0x04, 0x3C, 0x10, 0x41, 0x08,
            0x40, 0x08, 0x3E, 0x20, 0x32, 0x10, 0x40, 0x08,
            0x41, 0x08, 0x43, 0x20, 0x3C, 0x10, 0x3E, 0x08,
            0x40, 0x08, 0x3E, 0x80, 0x43, 0x80, 0x43, 0x10,
            0x40, 0x10, 0x42, 0x10, 0x40, 0x08, 0x42, 0x08,
            0x48, 0x30, 0x46, 0x10, 0x43, 0x20, 0x37, 0x20,
            0xFE, // Repeat x2
                0x1F, 0x20, 0x37, 0x20,
            0x00,
            0xFE, // Repeat x2
                0x1A, 0x20, 0x32, 0x20,
            0x00,
        0x00,
        // Channel 5: 0x59, 0x0EA1-0x0EE1
        0x05, 0x59,
            0xFB, // Repeat x5
                0x01, 0x80,
            0x00,
            0x43, 0x08, 0x4A, 0x18, 0x44, 0x08, 0x4B, 0x18,
            0x3F, 0x08, 0x46, 0x18, 0x3C, 0x08, 0x45, 0x10,
            0x43, 0x08, 0x3E, 0x08, 0x45, 0x10, 0x43, 0x08,
            0x3E, 0x08, 0x42, 0x18, 0x3F, 0x08, 0x43, 0x18,
            0x3C, 0x08, 0x43, 0x10, 0x45, 0x08, 0x37, 0x08,
            0x43, 0x18, 0x2B, 0x08, 0x32, 0x18,
            0xFE, // Repeat x2
                0x1F, 0x01, 0x26, 0x3F,
            0x00,
            0xFE, // Repeat x2
                0x1A, 0x01, 0x21, 0x3F,
            0x00,
        0x00,
        // Channel 10: 0x00, 0x0EE2-0x0F26
        0x0A, 0x00,
            0xF0, // Repeat x16
                0x2A, 0x02, 0x2A, 0x02, 0x2A, 0x02, 0x2A, 0x01,
                0x2A, 0x01,
            0x00,
            0xF0, // Repeat x16
                0x24, 0x02, 0x2A, 0x02, 0x2A, 0x02, 0x2A, 0x01,
                0x2A, 0x01,
            0x00,
            0xE2, // Repeat x30
                0x24, 0x02, 0x2A, 0x02, 0x2E, 0x02, 0x24, 0x01,
                0x2A, 0x01, 0x26, 0x02, 0x2A, 0x02, 0x2E, 0x02,
                0x26, 0x01, 0x2A, 0x01, 0x24, 0x02, 0x26, 0x02,
                0x24, 0x02, 0x2A, 0x01, 0x2A, 0x01, 0x26, 0x02,
                0x2A, 0x02, 0x2E, 0x02, 0x26, 0x01, 0x2A, 0x01,
            0x00,
        0x00,
        // MIDI Table End
        0x00,
    ]);
    
    private midiData: ChannelData[];
    private midiIndexs: [number, number][];
    private _midiOutput: WebAudioTinySynth | null = null;
    
    constructor() {
        this.midiData = this.generateMIDI();
        
        this.midiIndexs = new Array<[number, number]>(this.midiData.length);
        
        this._midiOutput = null;
    }
    
    get midiOutput() {
        if(!this._midiOutput)
            this._midiOutput = new WebAudioTinySynth();
        return this._midiOutput;
    }
    setVolume(volume: number) {
        this.midiOutput.setMasterVol(volume);
    }
    sendMIDI(data: number[]) {
        this.midiOutput.send(data);
    }
    
    // 0x014C-0x016A
    generateMIDI() {
        const midiData = [];
        let p = 0;
        while(OmniscentMIDI.MIDI_TABLE[p] - 1 >= 0) {
            const channel = OmniscentMIDI.MIDI_TABLE[p++] - 1;
            const instrument = OmniscentMIDI.MIDI_TABLE[p++];
            const data: number[] = [];
            p = this.generateMIDILoop(p, data);
            midiData.push({ channel, instrument, data: new Uint8Array(data) });
        }
        return midiData;
    }
    // 0x063B-0x0659
    generateMIDILoop(offset: number, data: number[]) {
        let p = offset;
        while(OmniscentMIDI.MIDI_TABLE[p] !== 0x00) {
            if(OmniscentMIDI.MIDI_TABLE[p] >= 0x80) {
                const count = 0x100 - OmniscentMIDI.MIDI_TABLE[p++];
                const q = p;
                for(let i = 0; i < count; ++i)
                    p = this.generateMIDILoop(q, data);
            } else
                data.push(OmniscentMIDI.MIDI_TABLE[p++], OmniscentMIDI.MIDI_TABLE[p++]);
        }
        ++p;
        return p;
    }
    
    async start() {
        for(let i = 0; i < this.midiData.length; ++i)
            this.midiIndexs[i] = [-2, 0];
        
        for(const channelData of this.midiData)
            this.sendMIDI([0xC0 + channelData.channel, channelData.instrument]);
    }
    stop() {
        // 0x052C
        for(let i = 1; i <= 15; ++i)
            this.sendMIDI([0xB0 + i, 0x7B, 0x00]);
        this.midiOutput.stopMIDI();
    }
    onTimer() {
        // 0x0568
        for(let i = 0; i < this.midiData.length; ++i) {
            const channel = this.midiData[i].channel;
            const data = this.midiData[i].data;
            if(this.midiIndexs[i][0] < data.length) {
                if(this.midiIndexs[i][1] === 0) {
                    this.midiIndexs[i][0] += 2;
                    if(this.midiIndexs[i][0] > 0)
                        this.sendMIDI([0x80 | channel, data[this.midiIndexs[i][0] - 2], 0x7F]);
                    if(this.midiIndexs[i][0] >= data.length) continue;
                    this.midiIndexs[i][1] = data[this.midiIndexs[i][0] + 1] * 29;
                    this.sendMIDI([0x90 | channel, data[this.midiIndexs[i][0]], 0x7F]);
                }
                --this.midiIndexs[i][1];
            }
        }
    }
}
