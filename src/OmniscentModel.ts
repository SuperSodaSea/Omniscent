import { OmniscentUtil } from './OmniscentUtil';

import type { OmniscentCamera } from './OmniscentCamera';


export class OmniscentModel {
    // 0x1047-0x105E: Index table
    static INDEX_TABLE = new Uint8Array([
        0x08, 0x28, 0x30, 0x10,
        0x18, 0x38, 0x20, 0x00,
        0x10, 0x30, 0x38, 0x18,
        0x00, 0x20, 0x28, 0x08,
        0x38, 0x30, 0x28, 0x20,
        0x00, 0x08, 0x10, 0x18,
    ]);
    
    // 0x105F-0x108B: Vertex table
    static VERTEX_TABLE = new Int8Array([
        0xE0, 0xE0, 0xE0,
        0x20, 0xE0, 0xE0,
        0x20, 0x20, 0xE0,
        0xE0, 0x20, 0xE0,
        0xE0, 0xE0, 0x20,
        0x20, 0xE0, 0x20,
        0x20, 0x20, 0x20,
        0xE0, 0x20, 0x20,
        0x40, 0x00, 0x00,
        0xC0, 0x00, 0x00,
        0x00, 0x40, 0x00,
        0x00, 0xC0, 0x00,
        0x00, 0x00, 0x40,
        0x00, 0x00, 0xC0,
        0x00, 0x00, 0x00,
    ]);
    
    // 0x108C-0x12E2: Model table
    static MODEL_TABLE = new Uint8Array([
        // Chunk 0, 0x108C-0x10E8
        0x71, 0x70, 0x00, 0x06,
        0x72, 0x00, 0x00, 0x06,
        0x71, 0x00, 0x70, 0x06,
        0x73, 0x07, 0x70, 0x06,
        0x73, 0x07, 0x00, 0x06,
        0x70, 0x07, 0x07, 0x06,
        0x74, 0x00, 0x07, 0x06,
        0x70, 0x00, 0x07, 0x40,
        0x72, 0x70, 0x07, 0x50,
        0x72, 0x70, 0x00, 0x50,
        0x71, 0x70, 0x70, 0x50,
        0x73, 0x00, 0x70, 0x40,
        0x71, 0x00, 0x00, 0x40,
        0x72, 0x00, 0x00, 0x50,
        0x71, 0x00, 0x70, 0x50,
        0x73, 0x07, 0x70, 0x46,
        0x73, 0x00, 0x00, 0x46,
        0x70, 0x07, 0x07, 0x46,
        0x72, 0x00, 0x07, 0x50,
        0x71, 0x00, 0x00, 0x00,
        0x71, 0x00, 0x00, 0x00,
        0x71, 0x00, 0xBB, 0x56,
        0x70, 0x0F, 0xBB, 0x46,
        0xFF,
        // Chunk 1, 0x10E9-0x11CD
        0x33, 0x00, 0x00, 0x00,
        0xF0, 0x00, 0x07, 0x06, 0xE4,
        0xB0, 0x00, 0xBB, 0x46, 0xE4,
        0x90, 0x00, 0xBB, 0x56, 0xE4,
        0x90, 0x00, 0xBB, 0x56, 0xE4,
        0x30, 0x00, 0xBB, 0x56,
        0xF0, 0x00, 0xBB, 0x56, 0x11,
        0xF0, 0x00, 0xBB, 0x46, 0x11,
        0xB0, 0x00, 0xBB, 0x56, 0x11,
        0x90, 0x00, 0xBB, 0x56, 0x11,
        0xB0, 0x00, 0xBB, 0x56, 0x11,
        0xF0, 0x00, 0xBB, 0x56, 0x11,
        0xF0, 0x00, 0xBB, 0x46, 0x11,
        0xB0, 0x00, 0xBB, 0x56, 0x11,
        0x30, 0x00, 0xBB, 0x56,
        0x10, 0x00, 0xBB, 0x56,
        0x34, 0x00, 0x00, 0x00,
        0x32, 0x05, 0x00, 0x80,
        0x35, 0x05, 0x80, 0x80,
        0x35, 0x05, 0x80, 0x00,
        0x33, 0x05, 0x80, 0x08,
        0x33, 0x05, 0x00, 0x08,
        0x74, 0x05, 0x08, 0x08,
        0x74, 0x05, 0x00, 0x00,
        0x73, 0x05, 0x08, 0x80,
        0x75, 0x00, 0x00, 0x00,
        0x75, 0x05, 0x08, 0x88,
        0x70, 0x00, 0x00, 0x00,
        0x74, 0x64, 0x08, 0x08,
        0x74, 0x60, 0x08, 0x00,
        0x72, 0x64, 0x08, 0x80,
        0x05, 0x60, 0x00, 0x80,
        0x05, 0x60, 0x00, 0x00,
        0x02, 0x60, 0x00, 0x08,
        0x34, 0x60, 0x00, 0x08,
        0x34, 0x60, 0x00, 0x00,
        0x32, 0x60, 0x00, 0x80,
        0x35, 0x60, 0x00, 0x80,
        0x35, 0x60, 0x00, 0x00,
        0x32, 0x60, 0x00, 0x08,
        0x34, 0x35, 0x00, 0x08,
        0x14, 0x65, 0x00, 0x00,
        0x32, 0x35, 0x00, 0x80,
        0x35, 0x35, 0x00, 0x80,
        0x15, 0x65, 0x00, 0x00,
        0x32, 0x35, 0x00, 0x08,
        0x34, 0x35, 0x80, 0x08,
        0x14, 0x65, 0x00, 0x00,
        0x32, 0x35, 0x80, 0x80,
        0x75, 0x00, 0x00, 0x00,
        0x52, 0x65, 0xE0, 0x77,
        0x32, 0x64, 0x0E, 0x77,
        0x12, 0x65, 0x00, 0x77,
        0x00, 0x65, 0x00, 0x77,
        0xFF,
        // Chunk 2, 0x11CE-0x128E
        0x32, 0x00, 0x00, 0x00,
        0xF0, 0x00, 0x00, 0x00, 0x14,
        0xB0, 0x00, 0x00, 0x00, 0x14,
        0x30, 0x00, 0x00, 0x00,
        0xF0, 0x00, 0x00, 0x00, 0xF4,
        0xF0, 0x00, 0xDD, 0x56, 0xF4,
        0x30, 0x00, 0xDD, 0x46,
        0x30, 0x00, 0xDD, 0x56,
        0x30, 0x00, 0xDD, 0x56,
        0x32, 0x00, 0x00, 0x50,
        0x30, 0x0A, 0xA0, 0x50,
        0x33, 0x00, 0xA0, 0x50,
        0x30, 0x00, 0x00, 0x50,
        0x32, 0x70, 0x00, 0x50,
        0x30, 0x00, 0xA0, 0x50,
        0x33, 0xA0, 0xA7, 0x50,
        0x33, 0x00, 0x00, 0x00,
        0x31, 0xA0, 0x7A, 0x50,
        0x31, 0x00, 0x0A, 0x50,
        0x31, 0x00, 0x0A, 0x50,
        0x32, 0x0A, 0x0A, 0x50,
        0x35, 0x00, 0x00, 0x00,
        0x72, 0x0A, 0x00, 0x00,
        0x70, 0x0A, 0xA0, 0x00,
        0x73, 0x00, 0xA0, 0x00,
        0x70, 0x00, 0x00, 0x00,
        0x72, 0x00, 0x00, 0x00,
        0x70, 0x00, 0xA0, 0x00,
        0x73, 0xA0, 0xA0, 0x00,
        0x73, 0xA0, 0x00, 0x99,
        0x71, 0xA0, 0x0A, 0x00,
        0x71, 0x00, 0x0A, 0x00,
        0x71, 0x00, 0x0A, 0x00,
        0x75, 0x0A, 0x0A, 0x00,
        0x70, 0x0C, 0x0C, 0x03,
        0x70, 0x00, 0x0C, 0x03,
        0x70, 0x00, 0x0C, 0x03,
        0x72, 0xC0, 0x7C, 0x03,
        0x72, 0x00, 0x00, 0x00,
        0x71, 0xC0, 0xC7, 0x03,
        0x73, 0x00, 0xC0, 0x03,
        0x71, 0x70, 0x00, 0x03,
        0x72, 0x00, 0x00, 0x03,
        0x71, 0x00, 0xC0, 0x03,
        0x73, 0x0C, 0xC0, 0x03,
        0x71, 0x00, 0x00, 0x03,
        0x31, 0x0C, 0xCC, 0xA3,
        0xFF,
        // Chunk 3, 0x128F-0x12E2
        0x32, 0x00, 0x00, 0x00,
        0xF0, 0x00, 0x70, 0x06, 0x14,
        0xB0, 0x00, 0xDD, 0x46, 0x14,
        0x30, 0x00, 0xDD, 0x56,
        0xB2, 0x00, 0x0D, 0x56, 0xC4,
        0x32, 0xDD, 0x00, 0x56,
        0x32, 0xDD, 0x00, 0x56,
        0x32, 0xDD, 0x00, 0x56,
        0x70, 0x00, 0xF0, 0x56,
        0x70, 0x00, 0xBB, 0x56,
        0x32, 0xB0, 0x0B, 0x46,
        0x72, 0xBB, 0x00, 0x56,
        0x71, 0xB0, 0xB0, 0x56,
        0x71, 0x02, 0x11, 0x56,
        0x71, 0x22, 0x11, 0x56,
        0x31, 0x20, 0x11, 0x56,
        0x73, 0x0B, 0xB0, 0x56,
        0x73, 0xBB, 0x00, 0x56,
        0x30, 0x0B, 0x0B, 0x46,
        0x30, 0x00, 0xBB, 0x56,
        0xFF,
    ]);
    
    // 0x1768: Vertex count (362)
    // 0x176A: Quad count (367)
    // 0x176C-0x22BB: Vertex data
    // 0x23EC-0x3241: Quad data
    public vertexCount = 0;
    public quadCount = 0;
    public vertexs = new Int16Array(362 * 4);
    public quads = new Int16Array(367 * 5);
    public transformedVertexs: Float32Array;
    
    constructor() {
        this.generateModel();
        
        this.transformedVertexs = new Float32Array(this.vertexCount * 3);
    }
    
    // 0x0C80-0x0DCA
    generateModel() {
        let p = 0;
        const int16Table = new Int16Array(4 * 15);
        const float32Table = new Float32Array(3 * 15);
        for(let i = 0; i < 4; ++i) {
            // 0x0C8B-0x0CAE
            for(let j = 0; j < 15; ++j) {
                for(let k = 0; k < 3; ++k) {
                    const x = OmniscentModel.VERTEX_TABLE[j * 3 + k];
                    int16Table[j * 4 + k] = x;
                    float32Table[j * 3 + k] = x;
                }
                int16Table[j * 4 + 3] = 0x7F00;
            }
            // 0x0CAF-0x0DC0
            while(true) {
                const a = OmniscentModel.MODEL_TABLE[p++];
                if(a === 0xFF) break;
                const face = a & 0x0F;
                const light = ((a << 8) & 0x7000) | 0x0F00;
                for(let j = 0; j < 6; ++j) {
                    let textureIndex;
                    if(j & 0x01)
                        textureIndex = OmniscentModel.MODEL_TABLE[p++] & 0x0F;
                    else
                        textureIndex = OmniscentModel.MODEL_TABLE[p] >> 4;
                    --textureIndex;
                    if(textureIndex < 0) continue;
                    this.quads[this.quadCount * 5 + 4] = textureIndex;
                    for(let k = 0; k < 4; ++k) {
                        const index = OmniscentModel.INDEX_TABLE[j * 4 + k] >> 3;
                        let vertexIndex = 0;
                        for(; vertexIndex < this.vertexCount; ++vertexIndex)
                            if(int16Table[index * 4] === this.vertexs[vertexIndex * 4]
                                && int16Table[index * 4 + 1] === this.vertexs[vertexIndex * 4 + 1]
                                && int16Table[index * 4 + 2] === this.vertexs[vertexIndex * 4 + 2]) break;
                        if(vertexIndex === this.vertexCount) {
                            this.vertexs[vertexIndex * 4] = int16Table[index * 4];
                            this.vertexs[vertexIndex * 4 + 1] = int16Table[index * 4 + 1];
                            this.vertexs[vertexIndex * 4 + 2] = int16Table[index * 4 + 2];
                            this.vertexs[vertexIndex * 4 + 3] = int16Table[index * 4 + 3];
                            ++this.vertexCount;
                        }
                        this.quads[this.quadCount * 5 + k] = vertexIndex;
                    }
                    ++this.quadCount;
                }
                // 0x0D36
                for(let j = 0; j < 3; ++j)
                    float32Table[14 * 3 + j] += float32Table[(8 + face) * 3 + j];
                // 0x0D4C
                if(a & 0x80) {
                    let angle = (OmniscentModel.MODEL_TABLE[p] << 8) & 0xF000;
                    if(angle >= 0x8000) angle -= 0x10000;
                    const angles: [number, number, number] = [
                        OmniscentModel.MODEL_TABLE[p] & 0x04 ? angle : 0,
                        OmniscentModel.MODEL_TABLE[p] & 0x02 ? angle : 0,
                        OmniscentModel.MODEL_TABLE[p] & 0x01 ? angle : 0,
                    ];
                    for(let j = 0; j < 14; ++j) {
                        const v = OmniscentUtil.rotateVector3([
                            float32Table[j * 3],
                            float32Table[j * 3 + 1],
                            float32Table[j * 3 + 2],
                        ], angles);
                        float32Table[j * 3] = v[0];
                        float32Table[j * 3 + 1] = v[1];
                        float32Table[j * 3 + 2] = v[2];
                    }
                    ++p;
                }
                // 0x0D77
                for(let j = 0; j < 4; ++j) {
                    const index0 = OmniscentModel.INDEX_TABLE[face * 4 + j] >> 3;
                    const index1 = OmniscentModel.INDEX_TABLE[(face * 4 + j) ^ 0x7] >> 3;
                    for(let k = 0; k < 4; ++k)
                        int16Table[index1 * 4 + k] = int16Table[index0 * 4 + k];
                    for(let k = 0; k < 3; ++k)
                        int16Table[index0 * 4 + k] = Math.round(
                            float32Table[index0 * 3 + k] + float32Table[14 * 3 + k]);
                    int16Table[index0 * 4 + 3] = light;
                }
            }
        }
    }
    
    // 0x0493-0x04D2
    transformModel(camera: OmniscentCamera) {
        const cameraPosition = camera.getPosition();
        const cameraMatrix = camera.getMatrix();
        for(let i = 0; i < this.vertexCount; ++i)
            for(let j = 0; j < 3; ++j)
                this.transformedVertexs[i * 3 + j]
                    = (this.vertexs[i * 4] - cameraPosition[0]) * cameraMatrix[j * 3]
                    + (this.vertexs[i * 4 + 1] - cameraPosition[1]) * cameraMatrix[j * 3 + 1]
                    + (this.vertexs[i * 4 + 2] - cameraPosition[2]) * cameraMatrix[j * 3 + 2];
    }
}
