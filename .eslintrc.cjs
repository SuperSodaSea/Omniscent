module.exports = {
    root: true,
    env: {
        es6: true,
        browser: true,
        worker: true,
        node: true,
    },
    
    parser: '@babel/eslint-parser',
    parserOptions: {
        sourceType: 'module',
    },
    
    ignorePatterns: ['/node_modules', '/dist', '/lib'],
    
    rules: {
        // Possible Problems
        'array-callback-return': 'error',
        'constructor-super': 'error',
        'for-direction': 'error',
        'getter-return': 'error',
        'no-async-promise-executor': 'error',
        'no-await-in-loop': 'off',
        'no-class-assign': 'error',
        'no-compare-neg-zero': 'error',
        'no-cond-assign': 'error',
        'no-const-assign': 'error',
        'no-constant-binary-expression': 'error',
        'no-constant-condition': ['error', { checkLoops: false }],
        'no-constructor-return': 'error',
        'no-control-regex': 'error',
        'no-debugger': 'error',
        'no-dupe-args': 'error',
        'no-dupe-class-members': 'error',
        'no-dupe-else-if': 'error',
        'no-dupe-keys': 'error',
        'no-duplicate-case': 'error',
        'no-duplicate-imports': 'error',
        'no-empty-character-class': 'error',
        'no-empty-pattern': 'error',
        'no-ex-assign': 'error',
        'no-fallthrough': 'error',
        'no-func-assign': 'error',
        'no-import-assign': 'error',
        'no-inner-declarations': 'error',
        'no-invalid-regexp': 'error',
        'no-irregular-whitespace': 'error',
        'no-loss-of-precision': 'error',
        'no-misleading-character-class': 'error',
        'no-new-native-nonconstructor': 'error',
        'no-new-symbol': 'error',
        'no-obj-calls': 'error',
        'no-promise-executor-return': 'error',
        'no-prototype-builtins': 'error',
        'no-self-assign': 'error',
        'no-self-compare': 'error',
        'no-setter-return': 'error',
        'no-sparse-arrays': 'error',
        'no-template-curly-in-string': 'error',
        'no-this-before-super': 'error',
        'no-undef': 'error',
        'no-unexpected-multiline': 'error',
        'no-unmodified-loop-condition': 'error',
        'no-unreachable': 'error',
        'no-unreachable-loop': 'error',
        'no-unsafe-finally': 'error',
        'no-unsafe-negation': 'error',
        'no-unsafe-optional-chaining': 'error',
        'no-unused-private-class-members': 'error',
        'no-unused-vars': 'error',
        'no-use-before-define': 'error',
        'no-useless-backreference': 'error',
        'require-atomic-updates': 'error',
        'use-isnan': 'error',
        'valid-typeof': 'error',
        
        // Suggestions
        'accessor-pairs': 'off',
        'arrow-body-style': ['error', 'as-needed'],
        'block-scoped-var': 'off',
        'camelcase': ['error', {
            properties: 'never',
            ignoreDestructuring: true,
            ignoreImports: true,
            ignoreGlobals: true,
        }],
        'capitalized-comments': 'off',
        'class-methods-use-this': 'off',
        'complexity': 'off',
        'consistent-return': 'error',
        'consistent-this': 'off',
        'curly': 'off',
        'default-case': 'error',
        'default-case-last': 'error',
        'default-param-last': 'error',
        'dot-notation': 'off',
        'eqeqeq': ['error', 'always'],
        'func-name-matching': ['error', 'always'],
        'func-names': ['error', 'as-needed'],
        'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
        'grouped-accessor-pairs': ['error', 'getBeforeSet'],
        'guard-for-in': 'off',
        'id-denylist': 'off',
        'id-length': 'off',
        'id-match': 'off',
        'init-declarations': 'off',
        'logical-assignment-operators': 'off',
        'max-classes-per-file': 'off',
        'max-depth': 'off',
        'max-lines': 'off',
        'max-lines-per-function': 'off',
        'max-nested-callbacks': 'off',
        'max-params': 'off',
        'max-statements': 'off',
        'multiline-comment-style': 'off',
        'new-cap': ['error', {
            newIsCap: true,
            capIsNew: true,
            properties: true,
        }],
        'no-alert': 'off',
        'no-array-constructor': 'off',
        'no-bitwise': 'off',
        'no-caller': 'error',
        'no-case-declarations': 'off',
        'no-confusing-arrow': 'error',
        'no-console': 'off',
        'no-continue': 'off',
        'no-delete-var': 'off',
        'no-div-regex': 'error',
        'no-else-return': ['error', { allowElseIf: false }],
        'no-empty': 'off',
        'no-empty-function': 'off',
        'no-empty-static-block': 'off',
        'no-eq-null': 'off',
        'no-eval': 'error',
        'no-extend-native': 'error',
        'no-extra-bind': 'error',
        'no-extra-boolean-cast': 'error',
        'no-extra-label': 'error',
        'no-extra-semi': 'error',
        'no-floating-decimal': 'error',
        'no-global-assign': 'error',
        'no-implicit-coercion': ['error', { disallowTemplateShorthand: true }],
        'no-implicit-globals': 'error',
        'no-implied-eval': 'error',
        'no-inline-comments': 'off',
        'no-invalid-this': 'error',
        'no-iterator': 'error',
        'no-label-var': 'error',
        'no-labels': 'off',
        'no-lone-blocks': 'off',
        'no-lonely-if': 'off',
        'no-loop-func': 'off',
        'no-magic-numbers': 'off',
        'no-mixed-operators': ['error', {
            groups: [
                ['&', '|', '^', '~', '<<', '>>', '>>>'],
                ['==', '!=', '===', '!==', '<', '<=', '>', '>='],
                ['&&', '||'],
                ['in', 'instanceof'],
            ],
            allowSamePrecedence: true,
        }],
        'no-multi-assign': 'off',
        'no-multi-str': 'error',
        'no-negated-condition': 'off',
        'no-nested-ternary': 'off',
        'no-new': 'error',
        'no-new-func': 'error',
        'no-new-object': 'error',
        'no-new-wrappers': 'error',
        'no-nonoctal-decimal-escape': 'error',
        'no-octal': 'error',
        'no-octal-escape': 'error',
        'no-param-reassign': ['error', { props: false }],
        'no-plusplus': 'off',
        'no-proto': 'error',
        'no-redeclare': 'error',
        'no-regex-spaces': 'error',
        'no-restricted-exports': 'off',
        'no-restricted-globals': 'off',
        'no-restricted-imports': 'off',
        'no-restricted-properties': 'off',
        'no-restricted-syntax': 'off',
        'no-return-assign': ['error', 'except-parens'],
        'no-return-await': 'off',
        'no-script-url': 'error',
        'no-sequences': 'error',
        'no-shadow': ['error', { hoist: 'all' }],
        'no-shadow-restricted-names': 'error',
        'no-ternary': 'off',
        'no-throw-literal': 'error',
        'no-undef-init': 'error',
        'no-undefined': 'off',
        'no-underscore-dangle': 'off',
        'no-unneeded-ternary': 'error',
        'no-unused-expressions': 'error',
        'no-unused-labels': 'error',
        'no-useless-call': 'error',
        'no-useless-catch': 'error',
        'no-useless-computed-key': ['error', { enforceForClassMembers: true }],
        'no-useless-concat': 'error',
        'no-useless-constructor': 'off',
        'no-useless-escape': 'error',
        'no-useless-rename': 'error',
        'no-useless-return': 'error',
        'no-var': 'error',
        'no-void': 'error',
        'no-warning-comments': 'off',
        'no-with': 'error',
        'object-shorthand': 'off',
        'one-var': 'off',
        'one-var-declaration-per-line': 'off',
        'operator-assignment': ['error', 'always'],
        'prefer-arrow-callback': 'error',
        'prefer-const': 'off',
        'prefer-destructuring': 'off',
        'prefer-exponentiation-operator': 'error',
        'prefer-named-capture-group': 'off',
        'prefer-numeric-literals': 'error',
        'prefer-object-has-own': 'off',
        'prefer-object-spread': 'error',
        'prefer-promise-reject-errors': 'error',
        'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',
        'quote-props': ['error', 'consistent-as-needed'],
        'radix': 'off',
        'require-await': 'off',
        'require-unicode-regexp': 'off',
        'require-yield': 'error',
        'sort-imports': 'off',
        'sort-keys': 'off',
        'sort-vars': 'off',
        'spaced-comment': ['error', 'always'],
        'strict': 'error',
        'symbol-description': 'error',
        'vars-on-top': 'off',
        'yoda': ['error', 'never'],
        
        // Layout & Formatting
        'array-bracket-newline': ['error', 'consistent'],
        'array-bracket-spacing': ['error', 'never'],
        'array-element-newline': 'off',
        'arrow-parens': ['error', 'as-needed'],
        'arrow-spacing': ['error', { before: true, after: true }],
        'block-spacing': ['error', 'always'],
        'brace-style': ['error', '1tbs', { allowSingleLine: true }],
        'comma-dangle': ['error', 'always-multiline'],
        'comma-spacing': ['error', { before: false, after: true }],
        'comma-style': ['error', 'last'],
        'computed-property-spacing': ['error', 'never'],
        'dot-location': ['error', 'property'],
        'eol-last': ['error', 'always'],
        'func-call-spacing': ['error', 'never'],
        'function-call-argument-newline': 'off',
        'function-paren-newline': 'off',
        'generator-star-spacing': ['error', 'before'],
        'implicit-arrow-linebreak': 'off',
        'indent': ['error', 4],
        'jsx-quotes': 'off',
        'key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
        'keyword-spacing': ['error', {
            before: true,
            after: true,
            overrides: {
                catch: { after: false },
                for: { after: false },
                if: { after: false },
                switch: { after: false },
                while: { after: false },
            },
        }],
        'line-comment-position': 'off',
        'linebreak-style': 'off',
        'lines-around-comment': 'off',
        'lines-between-class-members': 'off',
        'max-len': ['error', {
            code: 120,
        }],
        'max-statements-per-line': 'off',
        'multiline-ternary': 'off',
        'new-parens': ['error', 'always'],
        'newline-per-chained-call': 'off',
        'no-extra-parens': 'off',
        'no-mixed-spaces-and-tabs': 'error',
        'no-multi-spaces': ['error', { ignoreEOLComments: true }],
        'no-multiple-empty-lines': ['error', { max: 2, maxEOF: 0, maxBOF: 0 }],
        'no-tabs': 'error',
        'no-trailing-spaces': ['error', { skipBlankLines: true, ignoreComments: true }],
        'no-whitespace-before-property': 'error',
        'nonblock-statement-body-position': 'off',
        'object-curly-newline': ['error', { consistent: true }],
        'object-curly-spacing': ['error', 'always'],
        'object-property-newline': 'off',
        'operator-linebreak': ['error', 'before'],
        'padded-blocks': ['error', 'never'],
        'padding-line-between-statements': 'off',
        'quotes': ['error', 'single'],
        'rest-spread-spacing': ['error', 'never'],
        'semi': ['error', 'always'],
        'semi-spacing': ['error', { before: false, after: true }],
        'semi-style': ['error', 'last'],
        'space-before-blocks': ['error', 'always'],
        'space-before-function-paren': ['error', {
            anonymous: 'always',
            named: 'never',
            asyncArrow: 'always',
        }],
        'space-in-parens': ['error', 'never'],
        'space-infix-ops': 'error',
        'space-unary-ops': ['error', {
            words: true,
            nonwords: false,
        }],
        'switch-colon-spacing': ['error', { before: false, after: true }],
        'template-curly-spacing': ['error', 'always'],
        'template-tag-spacing': ['error', 'never'],
        'unicode-bom': 'off',
        'wrap-iife': ['error', 'outside'],
        'wrap-regex': 'off',
        'yield-star-spacing': ['error', 'after'],
    },
    
    overrides: [
        {
            files: ['*.ts'],
            
            parser: '@typescript-eslint/parser',
            parserOptions: {
                project: './tsconfig.json',
                sourceType: 'module',
            },
            plugins: [
                '@typescript-eslint/eslint-plugin',
            ],
            
            rules: {
                // TypeScript Rules
                '@typescript-eslint/adjacent-overload-signatures': 'error',
                '@typescript-eslint/array-type': 'error',
                '@typescript-eslint/await-thenable': 'error',
                '@typescript-eslint/ban-ts-comment': 'error',
                '@typescript-eslint/ban-tslint-comment': 'error',
                '@typescript-eslint/ban-types': 'error',
                '@typescript-eslint/class-literal-property-style': 'error',
                '@typescript-eslint/consistent-generic-constructors': 'error',
                '@typescript-eslint/consistent-indexed-object-style': 'error',
                '@typescript-eslint/consistent-type-assertions': 'error',
                '@typescript-eslint/consistent-type-definitions': 'error',
                '@typescript-eslint/consistent-type-exports': 'error',
                '@typescript-eslint/consistent-type-imports': 'error',
                '@typescript-eslint/explicit-function-return-type': 'off',
                '@typescript-eslint/explicit-member-accessibility': 'off',
                '@typescript-eslint/explicit-module-boundary-types': 'off',
                '@typescript-eslint/member-delimiter-style': 'off',
                '@typescript-eslint/member-ordering': 'off',
                '@typescript-eslint/method-signature-style': ['error', 'method'],
                '@typescript-eslint/naming-convention': 'off',
                '@typescript-eslint/no-base-to-string': 'error',
                '@typescript-eslint/no-confusing-non-null-assertion': 'error',
                '@typescript-eslint/no-confusing-void-expression': 'error',
                '@typescript-eslint/no-duplicate-enum-values': 'off',
                '@typescript-eslint/no-dynamic-delete': 'error',
                '@typescript-eslint/no-empty-interface': 'off',
                '@typescript-eslint/no-explicit-any': 'error',
                '@typescript-eslint/no-extra-non-null-assertion': 'error',
                '@typescript-eslint/no-extraneous-class': 'off',
                '@typescript-eslint/no-floating-promises': 'off',
                '@typescript-eslint/no-for-in-array': 'error',
                '@typescript-eslint/no-inferrable-types': 'error',
                '@typescript-eslint/no-invalid-void-type': 'error',
                '@typescript-eslint/no-meaningless-void-operator': 'error',
                '@typescript-eslint/no-misused-new': 'error',
                '@typescript-eslint/no-misused-promises': 'error',
                '@typescript-eslint/no-namespace': 'error',
                '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
                '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
                '@typescript-eslint/no-non-null-assertion': 'error',
                '@typescript-eslint/no-redundant-type-constituents': 'error',
                '@typescript-eslint/no-require-imports': 'off',
                '@typescript-eslint/no-this-alias': 'error',
                '@typescript-eslint/no-type-alias': 'off',
                '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
                '@typescript-eslint/no-unnecessary-condition': ['error', { allowConstantLoopConditions: true }],
                '@typescript-eslint/no-unnecessary-qualifier': 'error',
                '@typescript-eslint/no-unnecessary-type-arguments': 'error',
                '@typescript-eslint/no-unnecessary-type-assertion': 'error',
                '@typescript-eslint/no-unnecessary-type-constraint': 'error',
                '@typescript-eslint/no-unsafe-argument': 'error',
                '@typescript-eslint/no-unsafe-assignment': 'error',
                '@typescript-eslint/no-unsafe-call': 'error',
                '@typescript-eslint/no-unsafe-declaration-merging': 'error',
                '@typescript-eslint/no-unsafe-member-access': 'error',
                '@typescript-eslint/no-unsafe-return': 'error',
                '@typescript-eslint/no-useless-empty-export': 'error',
                '@typescript-eslint/no-var-requires': 'error',
                '@typescript-eslint/non-nullable-type-assertion-style': 'off',
                '@typescript-eslint/parameter-properties': 'error',
                '@typescript-eslint/prefer-as-const': 'error',
                '@typescript-eslint/prefer-enum-initializers': 'off',
                '@typescript-eslint/prefer-for-of': 'error',
                '@typescript-eslint/prefer-function-type': 'error',
                '@typescript-eslint/prefer-includes': 'error',
                '@typescript-eslint/prefer-literal-enum-member': 'off',
                '@typescript-eslint/prefer-namespace-keyword': 'error',
                '@typescript-eslint/prefer-nullish-coalescing': 'off',
                '@typescript-eslint/prefer-optional-chain': 'error',
                '@typescript-eslint/prefer-readonly': 'off',
                '@typescript-eslint/prefer-readonly-parameter-types': 'off',
                '@typescript-eslint/prefer-reduce-type-parameter': 'error',
                '@typescript-eslint/prefer-regexp-exec': 'error',
                '@typescript-eslint/prefer-return-this-type': 'error',
                '@typescript-eslint/prefer-string-starts-ends-with': 'error',
                '@typescript-eslint/prefer-ts-expect-error': 'error',
                '@typescript-eslint/promise-function-async': 'off',
                '@typescript-eslint/require-array-sort-compare': ['error', { ignoreStringArrays: true }],
                '@typescript-eslint/restrict-plus-operands': 'error',
                '@typescript-eslint/restrict-template-expressions': ['error', {
                    allowAny: false,
                    allowBoolean: true,
                    allowNullish: true,
                    allowNumber: true,
                    allowRegExp: true,
                }],
                '@typescript-eslint/sort-type-constituents': ['error', {
                    groupOrder: [
                        'keyword',
                        'literal',
                        'named',
                        'operator',
                        'function',
                        'import',
                        'conditional',
                        'object',
                        'tuple',
                        'intersection',
                        'union',
                        'nullish',
                    ],
                }],
                '@typescript-eslint/strict-boolean-expressions': 'error',
                '@typescript-eslint/switch-exhaustiveness-check': 'error',
                '@typescript-eslint/triple-slash-reference': 'error',
                '@typescript-eslint/type-annotation-spacing': ['error', { before: false, after: true }],
                '@typescript-eslint/typedef': 'off',
                '@typescript-eslint/unbound-method': 'error',
                '@typescript-eslint/unified-signatures': ['error', { ignoreDifferentlyNamedParameters: true }],
                
                // Extension Rules
                'brace-style': 'off',
                '@typescript-eslint/brace-style': ['error', '1tbs', { allowSingleLine: true }],
                'comma-dangle': 'off',
                '@typescript-eslint/comma-dangle': ['error', 'always-multiline'],
                'comma-spacing': 'off',
                '@typescript-eslint/comma-spacing': ['error', { before: false, after: true }],
                'default-param-last': 'off',
                '@typescript-eslint/default-param-last': 'error',
                'dot-notation': 'off',
                '@typescript-eslint/dot-notation': 'off',
                'func-call-spacing': 'off',
                '@typescript-eslint/func-call-spacing': ['error', 'never'],
                'indent': 'off',
                '@typescript-eslint/indent': ['off', 4],
                'init-declarations': 'off',
                '@typescript-eslint/init-declarations': 'off',
                'keyword-spacing': 'off',
                '@typescript-eslint/keyword-spacing': ['error', {
                    before: true,
                    after: true,
                    overrides: {
                        catch: { after: false },
                        for: { after: false },
                        if: { after: false },
                        switch: { after: false },
                        while: { after: false },
                    },
                }],
                'lines-between-class-members': 'off',
                '@typescript-eslint/lines-between-class-members': 'off',
                'no-array-constructor': 'off',
                '@typescript-eslint/no-array-constructor': 'off',
                'no-dupe-class-members': 'off',
                '@typescript-eslint/no-dupe-class-members': 'off',
                'no-duplicate-imports': 'off',
                '@typescript-eslint/no-duplicate-imports': 'error',
                'no-empty-function': 'off',
                '@typescript-eslint/no-empty-function': 'off',
                'no-extra-parens': 'off',
                '@typescript-eslint/no-extra-parens': 'off',
                'no-extra-semi': 'off',
                '@typescript-eslint/no-extra-semi': 'error',
                'no-implied-eval': 'off',
                '@typescript-eslint/no-implied-eval': 'error',
                'no-invalid-this': 'off',
                '@typescript-eslint/no-invalid-this': 'error',
                'no-loop-func': 'off',
                '@typescript-eslint/no-loop-func': 'off',
                'no-loss-of-precision': 'off',
                '@typescript-eslint/no-loss-of-precision': 'error',
                'no-magic-numbers': 'off',
                '@typescript-eslint/no-magic-numbers': 'off',
                'no-redeclare': 'off',
                '@typescript-eslint/no-redeclare': 'error',
                'no-restricted-imports': 'off',
                '@typescript-eslint/no-restricted-imports': 'off',
                'no-shadow': 'off',
                '@typescript-eslint/no-shadow': ['error', { hoist: 'all' }],
                'no-throw-literal': 'off',
                '@typescript-eslint/no-throw-literal': 'error',
                'no-unused-expressions': 'off',
                '@typescript-eslint/no-unused-expressions': 'error',
                'no-unused-vars': 'off',
                '@typescript-eslint/no-unused-vars': 'error',
                'no-use-before-define': 'off',
                '@typescript-eslint/no-use-before-define': 'error',
                'no-useless-constructor': 'off',
                '@typescript-eslint/no-useless-constructor': 'off',
                'object-curly-spacing': 'off',
                '@typescript-eslint/object-curly-spacing': ['error', 'always'],
                'padding-line-between-statements': 'off',
                '@typescript-eslint/padding-line-between-statements': 'off',
                'quotes': 'off',
                '@typescript-eslint/quotes': 'off',
                'require-await': 'off',
                '@typescript-eslint/require-await': 'off',
                'return-await': 'off',
                '@typescript-eslint/return-await': 'off',
                'semi': 'off',
                '@typescript-eslint/semi': ['error', 'always'],
                'space-before-blocks': 'off',
                '@typescript-eslint/space-before-blocks': ['error', 'always'],
                'space-before-function-paren': 'off',
                '@typescript-eslint/space-before-function-paren': ['error', {
                    anonymous: 'always',
                    named: 'never',
                    asyncArrow: 'always',
                }],
                'space-infix-ops': 'off',
                '@typescript-eslint/space-infix-ops': 'error',
            },
        },
    ],
};
